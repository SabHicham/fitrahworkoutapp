import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/config/firebase';
import { useState, useCallback } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '@/store/store';
import { programGenerationService } from '@/services/programGenerationService';

interface UserPreferences {
  level: 'D√©butant' | 'Interm√©diaire' | 'Avanc√©';
  goal: 'Perdre du poids' | 'Prise de muscle' | 'Performance';
  diet: 'Standard' | 'V√©g√©tarien' | 'Vegan' | 'Sans gluten';
  selectedDays: string[];
  daysPerWeek: number;
}

export function useProgramGeneration() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useSelector((state: RootState) => state.auth);

  // Utiliser useCallback pour √©viter la recr√©ation de la fonction √† chaque rendu
  const checkExistingProgram = useCallback(async () => {
    if (!user) {
      return { hasProgram: false, program: null };
    }

    try {
      setLoading(true);
      setError(null);
      
      console.log('üîç V√©rification du programme existant pour:', user.uid);
      console.log('üìñ Lecture du document userPrograms/' + user.uid);

      // V√©rifier dans userPrograms (collection sp√©cifique √† l'utilisateur)
      const userProgramDoc = await getDoc(doc(db, 'userPrograms', user.uid));
      
      if (userProgramDoc.exists()) {
        const programData = userProgramDoc.data();
        console.log('üìä Document trouv√©:', {
          exists: true,
          isActive: programData?.isActive,
          name: programData?.name,
          workoutPlan: programData?.workoutPlan?.length || 0,
          nutritionPlan: programData?.nutritionPlan?.length || 0,
          preferences: programData?.preferences
        });
        
        const hasProgram = programData?.isActive !== false; // true par d√©faut si pas d√©fini
        
        if (hasProgram) {
          console.log('‚úÖ Programme actif trouv√© pour l\'utilisateur');
          const program = { id: userProgramDoc.id, ...programData };
          return { hasProgram: true, program };
        } else {
          console.log('‚ùå Programme trouv√© mais inactif (isActive = false)');
          return { hasProgram: false, program: null };
        }
      } else {
        console.log('‚ùå Aucun document userPrograms/' + user.uid + ' trouv√©');
        return { hasProgram: false, program: null };
      }
    } catch (err: any) {
      console.error('‚ùå Erreur lors de la v√©rification du programme:', err);
      console.error('‚ùå Code d\'erreur:', err.code);
      console.error('‚ùå Message d\'erreur:', err.message);
      setError('Erreur lors de la v√©rification du programme existant');
      return { hasProgram: false, program: null };
    } finally {
      setLoading(false);
    }
  }, [user]); // D√©pendance stable sur user uniquement

  const generateNewProgram = useCallback(async (preferences: UserPreferences) => {
    if (!user) {
      setError('Utilisateur non authentifi√©');
      return { success: false };
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üéØ G√©n√©ration d\'un nouveau programme...');
      const result = await programGenerationService.generateProgram(user.uid, preferences);

      if (!result.success) {
        setError(result.error?.message || 'Erreur lors de la g√©n√©ration du programme');
        return { success: false };
      }

      console.log('‚úÖ Programme g√©n√©r√© avec succ√®s');
      return { success: true, program: result.program };
    } catch (err: any) {
      console.error('Error generating program:', err);
      setError('Erreur lors de la g√©n√©ration du programme');
      return { success: false };
    } finally {
      setLoading(false);
    }
  }, [user]);

  const updateExistingProgram = useCallback(async (preferences: UserPreferences) => {
    if (!user) {
      setError('Utilisateur non authentifi√©');
      return { success: false };
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ Mise √† jour du programme existant...');
      const result = await programGenerationService.updateProgram(user.uid, preferences);

      if (!result.success) {
        setError(result.error?.message || 'Erreur lors de la mise √† jour du programme');
        return { success: false };
      }

      console.log('‚úÖ Programme mis √† jour avec succ√®s');
      
      // Attendre un peu pour s'assurer que Firestore a bien enregistr√©
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return { success: true, program: result.program };
    } catch (err: any) {
      console.error('Error updating program:', err);
      setError('Erreur lors de la mise √† jour du programme');
      return { success: false };
    } finally {
      setLoading(false);
    }
  }, [user]);

  const getExistingProgram = useCallback(async () => {
    if (!user) {
      return null;
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üìñ R√©cup√©ration programme existant pour userId:', user.uid);
      const program = await programGenerationService.getExistingProgram(user.uid);
      return program;
    } catch (err: any) {
      console.error('Error getting existing program:', err);
      setError('Erreur lors de la r√©cup√©ration du programme');
      return null;
    } finally {
      setLoading(false);
    }
  }, [user]);

  return {
    loading,
    error,
    checkExistingProgram,
    generateNewProgram,
    updateExistingProgram,
    getExistingProgram,
  };
}